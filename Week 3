Week 3

Process Concept
  - Process is a program in execution, aka job
  - A program can be several processes
    Ex. Multiple users executing the same program
  - Program is passive entity stored on disk (executable file), process is active
    - it becomes a process when executable file is loaded into memory
  - Parts of a process (bottom to top):
    - Text: The program code
    - Data: Global variables
    - Heap: Memory that is allocated during run time
    - Stack: Temp data, function parameters, return addresses, local variables
      - Stack and Heap grow according to each other, Stack reads the instructions (code) and Heap stores the data from the instructions
      - Code (stack) and data (heap) are kept separately for security purposes
    - Why can the same program give the rise to multiple processes?
      The processes share the same code, hence it is just an instance

Process State
  - As the process executes, it changes state:
    - new : The process is being created
    - ready : The process is waiting to be assigned to a processor
    - running : Instructions are being executed
    - waiting : The process is waiting for some event to occur
    - terminated : The process has finished execution and deallocate all resources
  - Time slice : Amount of processing time the process gets (time slot)

Process Control Block (PCB)
  - Information associated with each process, aka task control block
  - Data instruction that stores the information of the process, so what the OS can keep track of the process
  - Parts of the PCB
    - Process State: Running, waiting, PID - process identifier number (job number)
    - Program counter: Pointer that points to the next set of instructions that the program needs to fetch form the memory
    - CPU registers: Storage areas in the CPU, that stores the current data of the process; contents of all process-centric registers
    - Memory-management information: Memory allocated to the process, including the memory limits of the process, I/O devices, etc.
  - Context switch: overhead - time it takes the system to manage the processes; the system does no useful work while switching

Process Creation
  - Parent process create children processes, which in turn create other processes, forming a tree of processes
  - Processes are identified and managed via a process identifier (pid)
  - Design options
    - Resource sharing options
      - Parent and children share all resources
      - Children share subset of parent's resources
      - Parent and child share no resource - DDoS
    - Execution options
      - Parent and children execute concurrently
      - Parent waits until children terminate
    - Address space
      - Child duplicate of parent
      - Child has a program loaded into it
  - UNIX system calls
    - fork() : Creating a new process
      - int rc = fork(), if(rc [option from below])
        - < tail
        - =0 child
        - > parent
    - wait() : allows the parent process to wait while the child executes
    - exec() : system call used after a fork() to replace the process' memory space with a new program
               Allows the child to run a different program
    - Process Termination
      - process executes last statement and then asks the OS to delete it using the exit() system call
        - Returns status data from child to parent -via wait() and process resources are deallocated by OS
      - Parent may terminate the execution of children processes using the abort() system call
      - Some reasons to use abort()
        - Child has exceeded allocated resources
        - Task assigned to child is no longer required
        - The parent is exiting and the OS does not allow a child to continue if its parent terminates
